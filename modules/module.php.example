<?php

$modules['module'] = [
	// Основная таблица с которой будет работать модуль
	'table' => 'users',
	'triggers' => [
		// После выполнения действия delete выполнится триггер get_user.
		'delete' => [
			// Доступно 2 ключа - before и after. т.е. когда выполнять до или постле.
			'after' => 'get_user'
		],
	],
	// Список действий доступных для этого модуля
    'actions' => [
    	// означает что действие добавления будет доступно
		'add' => true,
		// означает что действие сохранения будет доступно
		'save' => true,
		// означает что действие удаления будет доступно
		'delete' => true,
		// Действие просмотра одной записи. 
 		'view' => [
 			// Список выводимых полей, доступно 2 типа значения:
 			// 'all' - строка, означается что будут выводится все поля из секции fields(смотрите ниже). 
 			// массив - Передеаем список ключей выводимых полей в виде массива
			'fields' => 'all',
			// Список полей для фильтрации, доступно 2 типа значения:
			// 'all' - строка, означается что будут выводится все поля из секции fields(смотрите ниже). 
			// массив - Передеаем список ключей выводимых полей в виде массива
			// 'exclude' - значение массив, указываем список ключей которые надо исключить из вывода. т.е. выже в fields выставляем all и исключаем ненужные поля, 
			// это зачастую очень удобно
			'exclude' => ['id']
		],
		// В этой секции все тоже самое что в секции view
 		'list' => [
			'fields' => 'all',
			'filter' => ['name','login'],
		],
		// Действие определения полей которые будут модифицироваться. т.е. если мы хотим чтобы можно было модифицировать только 2 поля при действии save, пишем сюда.
		// После при действиях save и add надо указывать обязательный параметр типа defrec. Их можно создавать сколько угодно.
		// Так же можно запрашивать список полей которые доступны для сохранения или добавления. 
   		'defrec' => [
   			// 'single' - тип defrec
			'single' => [ 
				// 'all' - строка, означается что будут выводится все поля из секции fields(смотрите ниже). 
				'fields' => 'all',
				// 'exclude' - значение массив, указываем список ключей которые надо исключить из вывода. т.е. выже в fields выставляем all и исключаем ненужные поля, 
				// это зачастую очень удобно
				'exclude' => ['id']
			]
		],
	],
	// параметр where подставляемый в sql запрос, делится так же на действия
	'where' => [
		// Ключ это действие, значение - where. В строку можно подставлять из объекта ввода вывода = $p:
		// input->key - где key это ключ массива ввода, поскольку массив может быть рекурсивно ассоциативным, то $p->input['key']['subkey'] будет выглядеть как :input->key->subkey.
		// Так же доступен и $p->local['key'] как :local->key
		'save' => 'pathtofile=":input->pathtofile"',
		'delete' => 'pathtofile=":input->pathtofile"'
	],
	// Используется только для действий list и view
	'join' => '
		left join Groups on Groups.id=users.groupid
	',
	// Сортировка по полям
	'orderby' 	=> [
		// Список сотрируемых полей
		'by'	=> ['login'],
		// Порядок сортировки. Параметры: ASC, DESC
		'order' => 'ASC'
	],
	// Лимит выставляемый для действия list
	'limit' => 10,
	// Максимальный лимит выставляемый для действия list
	'maxlimit' => 1000,
	// Массив используемых полей
    'fields' => [

        'login' => [ 
        	// если у вас в базе поле на самом деле называется не login а profile_login
        	'key' => 'profile_login',
        	// Исползуется только при действии view и list, служит для формирования select, т.е. ,будет - select concat(profile_login,' ',profile_name) as login ...
        	'field' => 'concat(profile_login,' ',profile_name)', 
        	// тип поля. никак жестко не контролируется. можно задать что в голову взбредет. по умолчанию - text
			'type' => 'text', 
			// Текстовое, человекопонятное значение поля, используется в выводе.
			'name' => 'Имя пользователя'
			// Если хотим чтобы поле было доступно для редактирования, если не указать, то по умолчани будет не доступно для редактирования
			'edit' => 'yes',
			// Параметры фильтрации для этого поля
			'filter' => [ 
				// sql бывает 2-х типов:
				// like - ':this->key like "%:this->value%"';
				// key - ':this->key=":this->value"';
				// 
				// еcли значение не key и не like, то можно написать туда часть своего запроса
				// Доступны параметры - :input, :local, :this->key, :this->value
				'sql' => 'like' 
			],
            // Проверки этого поля. Делится на типы действия. 
            'check' => [
            	// Означает что при действии add это поле проверится функцией is_email. В классе проверки. Если будет указан неверное имя проверки, то вернется ошибка.
            	'add' => ['is_email']
			],
			// Это дополнительная выводимая инфорнмация, делится на 2 секции heads и filters. т.к. можно запрашивать отдельно структуру полей для фильтрации и для вывода
			'extra' => [
				// Выводится в результате 
				'heads' => [
					// можно написать что угодно
				],
				// Выводится в фильтре.
				'heads' => [
					// можно написать что угодно
				]

			]
		 ],
	]
];	